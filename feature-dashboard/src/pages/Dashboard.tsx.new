import { useState, useEffect } from 'react';
import { Search, Filter, SortAsc, SortDesc, Flag, ToggleLeft, ToggleRight, RefreshCw, Settings, Home, Eye, EyeOff } from 'lucide-react';
import { useFeatureFlags } from '../contexts/FeatureFlagContext';
import { useNavigate } from 'react-router-dom';
import type { FeatureFlag } from '../contexts/FeatureFlagContext';

export default function FeatureFlagDashboard() {
  const { flags, toggleFlag, resetToDefaults, loading, error } = useFeatureFlags();
  const navigate = useNavigate();

  const [filteredFlags, setFilteredFlags] = useState<FeatureFlag[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterStatus, setFilterStatus] = useState<'all' | 'enabled' | 'disabled'>('all');
  const [sortKey, setSortKey] = useState<'name' | 'status'>('name');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');
  const [showFilters, setShowFilters] = useState(false);

  // Calculate stats
  const enabledCount = flags.filter(flag => flag.enabled).length;
  const disabledCount = flags.filter(flag => !flag.enabled).length;

  // Filter and sort flags
  useEffect(() => {
    let filtered = [...flags];

    // Apply search filter
    if (searchQuery) {
      filtered = filtered.filter(flag => 
        flag.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        flag.description.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    // Apply status filter
    if (filterStatus !== 'all') {
      filtered = filtered.filter(flag => 
        filterStatus === 'enabled' ? flag.enabled : !flag.enabled
      );
    }

    // Apply sorting
    filtered.sort((a, b) => {
      let comparison = 0;
      
      if (sortKey === 'name') {
        comparison = a.name.localeCompare(b.name);
      } else if (sortKey === 'status') {
        comparison = a.enabled === b.enabled ? 0 : a.enabled ? -1 : 1;
      }
      
      return sortDirection === 'asc' ? comparison : -comparison;
    });

    setFilteredFlags(filtered);
  }, [flags, searchQuery, filterStatus, sortKey, sortDirection]);

  const handleSort = (key: 'name' | 'status') => {
    if (sortKey === key) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortKey(key);
      setSortDirection('asc');
    }
  };

  const getSortIcon = (key: 'name' | 'status') => {
    if (sortKey !== key) return null;
    return sortDirection === 'asc' ? <SortAsc className="w-4 h-4" /> : <SortDesc className="w-4 h-4" />;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50">
      <div className="max-w-6xl mx-auto p-6">
        {/* Header */}
        <div className="text-center mb-12">
          {error && (
            <div className="mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg">
              <p>Error: {error}</p>
            </div>
          )}
          
          <div className="flex items-center justify-center gap-3 mb-4">
            <Settings className="w-8 h-8 text-indigo-600" />
            <h1 className="text-4xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
              HomePage Feature Controls
            </h1>
          </div>
          <p className="text-gray-600 text-lg mb-4">Manage feature flags for the main homepage</p>
          
          <div className="flex items-center justify-center gap-6 text-sm text-gray-500 mb-4">
            <span className="flex items-center gap-1">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              {enabledCount} Active
            </span>
            <span className="flex items-center gap-1">
              <div className="w-2 h-2 bg-gray-400 rounded-full"></div>
              {disabledCount} Inactive
            </span>
            <span className="flex items-center gap-1">
              <Flag className="w-4 h-4" />
              {flags.length} Total
            </span>
          </div>

          {/* Navigation */}
          <div className="flex items-center justify-center gap-4 mb-8">
            <button
              onClick={() => navigate('/')}
              className="flex items-center gap-2 px-4 py-2 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors shadow-sm"
            >
              <Home className="w-4 h-4" />
              View Homepage
            </button>
            <button
              onClick={resetToDefaults}
              disabled={loading}
              className="flex items-center gap-2 px-4 py-2 bg-indigo-100 text-indigo-700 rounded-lg hover:bg-indigo-200 transition-colors disabled:opacity-50"
            >
              <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />
              Reset to Defaults
            </button>
          </div>
        </div>

        {/* Search and Filters */}
        <div className="bg-white rounded-xl shadow-lg border border-gray-100 p-6 mb-8">
          <div className="flex flex-col sm:flex-row gap-4 items-center justify-between">
            {/* Search */}
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Search flags..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full pl-10 pr-4 py-2.5 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none transition-all"
              />
            </div>

            {/* Filter Toggle */}
            <button
              onClick={() => setShowFilters(!showFilters)}
              className="flex items-center gap-2 px-4 py-2.5 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
            >
              <Filter className="w-4 h-4" />
              Filters
            </button>
          </div>

          {/* Expanded Filters */}
          {showFilters && (
            <div className="mt-4 pt-4 border-t border-gray-100">
              <div className="flex flex-wrap gap-2">
                <button
                  onClick={() => setFilterStatus('all')}
                  className={`px-3 py-1.5 rounded-full text-sm transition-colors ${
                    filterStatus === 'all' 
                      ? 'bg-indigo-100 text-indigo-700 border border-indigo-200' 
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  All Flags
                </button>
                <button
                  onClick={() => setFilterStatus('enabled')}
                  className={`px-3 py-1.5 rounded-full text-sm transition-colors ${
                    filterStatus === 'enabled' 
                      ? 'bg-green-100 text-green-700 border border-green-200' 
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  Active Only
                </button>
                <button
                  onClick={() => setFilterStatus('disabled')}
                  className={`px-3 py-1.5 rounded-full text-sm transition-colors ${
                    filterStatus === 'disabled' 
                      ? 'bg-red-100 text-red-700 border border-red-200' 
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  Inactive Only
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Feature Flags Grid */}
        <div className="space-y-4">
          {/* Table Header */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-100 overflow-hidden">
            <div className="grid grid-cols-12 gap-4 p-4 bg-gray-50 font-medium text-gray-700 text-sm">
              <div className="col-span-4 flex items-center gap-2">
                <button
                  onClick={() => handleSort('name')}
                  className="flex items-center gap-1 hover:text-indigo-600 transition-colors"
                >
                  Feature Name
                  {getSortIcon('name')}
                </button>
              </div>
              <div className="col-span-4">Description</div>
              <div className="col-span-2 flex items-center gap-2">
                <button
                  onClick={() => handleSort('status')}
                  className="flex items-center gap-1 hover:text-indigo-600 transition-colors"
                >
                  Status
                  {getSortIcon('status')}
                </button>
              </div>
              <div className="col-span-2 text-center">Actions</div>
            </div>
          </div>

          {/* Loading State */}
          {loading && (
            <div className="text-center py-12">
              <RefreshCw className="w-8 h-8 animate-spin text-indigo-600 mx-auto mb-4" />
              <p className="text-gray-600">Loading feature flags...</p>
            </div>
          )}

          {/* Feature Flag Items */}
          {!loading && filteredFlags.map((flag) => (
            <div
              key={flag.id}
              className="bg-white rounded-lg shadow-sm border border-gray-100 hover:shadow-md transition-shadow"
            >
              <div className="grid grid-cols-12 gap-4 p-4 items-center">
                {/* Flag Name & Icon */}
                <div className="col-span-4 flex items-center gap-3">
                  <div className={`p-2 rounded-lg ${flag.enabled ? 'bg-green-100' : 'bg-gray-100'}`}>
                    {flag.enabled ? (
                      <Eye className="w-5 h-5 text-green-600" />
                    ) : (
                      <EyeOff className="w-5 h-5 text-gray-400" />
                    )}
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-800">{flag.name}</h3>
                    <p className="text-xs text-gray-500 font-mono">{flag.key}</p>
                  </div>
                </div>

                {/* Description */}
                <div className="col-span-4">
                  <p className="text-gray-600 text-sm">{flag.description}</p>
                </div>

                {/* Status */}
                <div className="col-span-2">
                  <span className={`inline-flex items-center gap-1 px-2.5 py-1 rounded-full text-xs font-medium ${
                    flag.enabled 
                      ? 'bg-green-100 text-green-700 border border-green-200' 
                      : 'bg-gray-100 text-gray-600 border border-gray-200'
                  }`}>
                    {flag.enabled ? (
                      <>
                        <div className="w-1.5 h-1.5 bg-green-500 rounded-full"></div>
                        Active
                      </>
                    ) : (
                      <>
                        <div className="w-1.5 h-1.5 bg-gray-400 rounded-full"></div>
                        Inactive
                      </>
                    )}
                  </span>
                </div>

                {/* Actions */}
                <div className="col-span-2 flex justify-center">
                  <button
                    onClick={() => toggleFlag(flag.id)}
                    disabled={loading}
                    className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all transform hover:scale-105 disabled:opacity-50 disabled:transform-none ${
                      flag.enabled
                        ? 'bg-red-100 text-red-700 hover:bg-red-200 border border-red-200'
                        : 'bg-green-100 text-green-700 hover:bg-green-200 border border-green-200'
                    }`}
                  >
                    {flag.enabled ? (
                      <>
                        <ToggleLeft className="w-4 h-4" />
                        Disable
                      </>
                    ) : (
                      <>
                        <ToggleRight className="w-4 h-4" />
                        Enable
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>
          ))}

          {/* Empty State */}
          {!loading && filteredFlags.length === 0 && (
            <div className="text-center py-12 bg-white rounded-lg shadow-sm border border-gray-100">
              <Flag className="w-12 h-12 text-gray-300 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-600 mb-2">No flags found</h3>
              <p className="text-gray-500">
                {searchQuery || filterStatus !== 'all' 
                  ? 'Try adjusting your search or filters' 
                  : 'No feature flags have been created yet'
                }
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
